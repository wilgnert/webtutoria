// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package database

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :execresult
insert into Categories (name) values (?)
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCategory, name)
}

const deleteCategory = `-- name: DeleteCategory :execresult
delete from Categories
where id = ?
`

func (q *Queries) DeleteCategory(ctx context.Context, id int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCategory, id)
}

const getAllCategories = `-- name: GetAllCategories :many
select id, name from Categories
order by name
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
select id, name from Categories
where id = ?
`

func (q *Queries) GetCategoryByID(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByID, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getCategoryByName = `-- name: GetCategoryByName :one
select id, name from Categories
where name = ?
`

func (q *Queries) GetCategoryByName(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByName, name)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :execresult
update Categories
set name = ?
where id = ?
`

type UpdateCategoryParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCategory, arg.Name, arg.ID)
}

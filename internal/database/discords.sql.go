// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: discords.sql

package database

import (
	"context"
)

const createStudentDiscord = `-- name: CreateStudentDiscord :exec
insert into StudentDiscords (student_id, discord_id)
values (?, ?)
on duplicate key update
discord_id = values(discord_id)
`

type CreateStudentDiscordParams struct {
	StudentID int32  `json:"student_id"`
	DiscordID string `json:"discord_id"`
}

func (q *Queries) CreateStudentDiscord(ctx context.Context, arg CreateStudentDiscordParams) error {
	_, err := q.db.ExecContext(ctx, createStudentDiscord, arg.StudentID, arg.DiscordID)
	return err
}

const createTutorDiscord = `-- name: CreateTutorDiscord :exec
insert into TutorDiscords (tutor_id, discord_id)
values (?, ?)
on duplicate key update
discord_id = values(discord_id)
`

type CreateTutorDiscordParams struct {
	TutorID   int32  `json:"tutor_id"`
	DiscordID string `json:"discord_id"`
}

func (q *Queries) CreateTutorDiscord(ctx context.Context, arg CreateTutorDiscordParams) error {
	_, err := q.db.ExecContext(ctx, createTutorDiscord, arg.TutorID, arg.DiscordID)
	return err
}

const deleteStudentDiscordByStudentID = `-- name: DeleteStudentDiscordByStudentID :exec
delete from StudentDiscords
where student_id = ?
`

func (q *Queries) DeleteStudentDiscordByStudentID(ctx context.Context, studentID int32) error {
	_, err := q.db.ExecContext(ctx, deleteStudentDiscordByStudentID, studentID)
	return err
}

const deleteTutorDiscordByTutorID = `-- name: DeleteTutorDiscordByTutorID :exec
delete from TutorDiscords
where tutor_id = ?
`

func (q *Queries) DeleteTutorDiscordByTutorID(ctx context.Context, tutorID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTutorDiscordByTutorID, tutorID)
	return err
}

const getStudentDiscordByDiscordID = `-- name: GetStudentDiscordByDiscordID :one
select student_id, discord_id, created_at from StudentDiscords
where discord_id = ?
`

func (q *Queries) GetStudentDiscordByDiscordID(ctx context.Context, discordID string) (Studentdiscord, error) {
	row := q.db.QueryRowContext(ctx, getStudentDiscordByDiscordID, discordID)
	var i Studentdiscord
	err := row.Scan(&i.StudentID, &i.DiscordID, &i.CreatedAt)
	return i, err
}

const getStudentDiscordByStudentID = `-- name: GetStudentDiscordByStudentID :one
select student_id, discord_id, created_at from StudentDiscords
where student_id = ?
`

func (q *Queries) GetStudentDiscordByStudentID(ctx context.Context, studentID int32) (Studentdiscord, error) {
	row := q.db.QueryRowContext(ctx, getStudentDiscordByStudentID, studentID)
	var i Studentdiscord
	err := row.Scan(&i.StudentID, &i.DiscordID, &i.CreatedAt)
	return i, err
}

const getTutorDiscordByDiscordID = `-- name: GetTutorDiscordByDiscordID :one
select tutor_id, discord_id, created_at from TutorDiscords
where discord_id = ?
`

func (q *Queries) GetTutorDiscordByDiscordID(ctx context.Context, discordID string) (Tutordiscord, error) {
	row := q.db.QueryRowContext(ctx, getTutorDiscordByDiscordID, discordID)
	var i Tutordiscord
	err := row.Scan(&i.TutorID, &i.DiscordID, &i.CreatedAt)
	return i, err
}

const getTutorDiscordByTutorID = `-- name: GetTutorDiscordByTutorID :one
select tutor_id, discord_id, created_at from TutorDiscords
where tutor_id = ?
`

func (q *Queries) GetTutorDiscordByTutorID(ctx context.Context, tutorID int32) (Tutordiscord, error) {
	row := q.db.QueryRowContext(ctx, getTutorDiscordByTutorID, tutorID)
	var i Tutordiscord
	err := row.Scan(&i.TutorID, &i.DiscordID, &i.CreatedAt)
	return i, err
}

const listStudentDiscords = `-- name: ListStudentDiscords :many
select student_id, discord_id, created_at from StudentDiscords
order by created_at desc
`

func (q *Queries) ListStudentDiscords(ctx context.Context) ([]Studentdiscord, error) {
	rows, err := q.db.QueryContext(ctx, listStudentDiscords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Studentdiscord{}
	for rows.Next() {
		var i Studentdiscord
		if err := rows.Scan(&i.StudentID, &i.DiscordID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTutorDiscords = `-- name: ListTutorDiscords :many
select tutor_id, discord_id, created_at from TutorDiscords
order by created_at desc
`

func (q *Queries) ListTutorDiscords(ctx context.Context) ([]Tutordiscord, error) {
	rows, err := q.db.QueryContext(ctx, listTutorDiscords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tutordiscord{}
	for rows.Next() {
		var i Tutordiscord
		if err := rows.Scan(&i.TutorID, &i.DiscordID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

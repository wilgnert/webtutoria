// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: student-subject.sql

package database

import (
	"context"
	"database/sql"
)

const createStudentSubjectCompletion = `-- name: CreateStudentSubjectCompletion :execresult
INSERT INTO StudentSubjectCompletion (student_id, subject_id)
VALUES (?, ?)
`

type CreateStudentSubjectCompletionParams struct {
	StudentID int32 `json:"student_id"`
	SubjectID int32 `json:"subject_id"`
}

func (q *Queries) CreateStudentSubjectCompletion(ctx context.Context, arg CreateStudentSubjectCompletionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createStudentSubjectCompletion, arg.StudentID, arg.SubjectID)
}

const deleteStudentSubjectCompletion = `-- name: DeleteStudentSubjectCompletion :exec
DELETE FROM StudentSubjectCompletion
WHERE id = ?
`

func (q *Queries) DeleteStudentSubjectCompletion(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteStudentSubjectCompletion, id)
	return err
}

const getStudentSubjectCompletionByID = `-- name: GetStudentSubjectCompletionByID :one
SELECT id, student_id, subject_id, completed_at FROM StudentSubjectCompletion
WHERE id = ?
`

func (q *Queries) GetStudentSubjectCompletionByID(ctx context.Context, id int32) (Studentsubjectcompletion, error) {
	row := q.db.QueryRowContext(ctx, getStudentSubjectCompletionByID, id)
	var i Studentsubjectcompletion
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.SubjectID,
		&i.CompletedAt,
	)
	return i, err
}

const listStudentSubjectCompletions = `-- name: ListStudentSubjectCompletions :many
SELECT id, student_id, subject_id, completed_at FROM StudentSubjectCompletion
`

func (q *Queries) ListStudentSubjectCompletions(ctx context.Context) ([]Studentsubjectcompletion, error) {
	rows, err := q.db.QueryContext(ctx, listStudentSubjectCompletions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Studentsubjectcompletion{}
	for rows.Next() {
		var i Studentsubjectcompletion
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.SubjectID,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudentSubjectCompletionsByStudent = `-- name: ListStudentSubjectCompletionsByStudent :many
SELECT id, student_id, subject_id, completed_at FROM StudentSubjectCompletion
WHERE student_id = ?
`

func (q *Queries) ListStudentSubjectCompletionsByStudent(ctx context.Context, studentID int32) ([]Studentsubjectcompletion, error) {
	rows, err := q.db.QueryContext(ctx, listStudentSubjectCompletionsByStudent, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Studentsubjectcompletion{}
	for rows.Next() {
		var i Studentsubjectcompletion
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.SubjectID,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudentSubjectCompletionsBySubject = `-- name: ListStudentSubjectCompletionsBySubject :many
SELECT id, student_id, subject_id, completed_at FROM StudentSubjectCompletion
WHERE subject_id = ?
`

func (q *Queries) ListStudentSubjectCompletionsBySubject(ctx context.Context, subjectID int32) ([]Studentsubjectcompletion, error) {
	rows, err := q.db.QueryContext(ctx, listStudentSubjectCompletionsBySubject, subjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Studentsubjectcompletion{}
	for rows.Next() {
		var i Studentsubjectcompletion
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.SubjectID,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

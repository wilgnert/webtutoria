// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: student-tutor.sql

package database

import (
	"context"
	"database/sql"
)

const createStudentTutor = `-- name: CreateStudentTutor :execresult
insert into StudentTutor (student_id, tutor_id)
values (?, ?)
`

type CreateStudentTutorParams struct {
	StudentID int32 `json:"student_id"`
	TutorID   int32 `json:"tutor_id"`
}

func (q *Queries) CreateStudentTutor(ctx context.Context, arg CreateStudentTutorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createStudentTutor, arg.StudentID, arg.TutorID)
}

const deleteStudentTutorByID = `-- name: DeleteStudentTutorByID :exec
delete from
    StudentTutor
where
    id = ?
`

func (q *Queries) DeleteStudentTutorByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteStudentTutorByID, id)
	return err
}

const getStudentTutorByID = `-- name: GetStudentTutorByID :one
select
    id, student_id, tutor_id, created_at
from
    StudentTutor
where
    id = ?
`

func (q *Queries) GetStudentTutorByID(ctx context.Context, id int32) (Studenttutor, error) {
	row := q.db.QueryRowContext(ctx, getStudentTutorByID, id)
	var i Studenttutor
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.TutorID,
		&i.CreatedAt,
	)
	return i, err
}

const listStudentTutors = `-- name: ListStudentTutors :many
SELECT
    id, student_id, tutor_id, created_at
FROM
    StudentTutor
ORDER BY
    student_id, tutor_id
`

func (q *Queries) ListStudentTutors(ctx context.Context) ([]Studenttutor, error) {
	rows, err := q.db.QueryContext(ctx, listStudentTutors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Studenttutor{}
	for rows.Next() {
		var i Studenttutor
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.TutorID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudentTutorsByStudent = `-- name: ListStudentTutorsByStudent :many
select
    id, student_id, tutor_id, created_at
from
    StudentTutor
where
    student_id = ?
ORDER BY
    tutor_id
`

func (q *Queries) ListStudentTutorsByStudent(ctx context.Context, studentID int32) ([]Studenttutor, error) {
	rows, err := q.db.QueryContext(ctx, listStudentTutorsByStudent, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Studenttutor{}
	for rows.Next() {
		var i Studenttutor
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.TutorID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudentTutorsByTutor = `-- name: ListStudentTutorsByTutor :many
select
    id, student_id, tutor_id, created_at
from
    StudentTutor
where
    tutor_id = ?
ORDER BY
    student_id
`

func (q *Queries) ListStudentTutorsByTutor(ctx context.Context, tutorID int32) ([]Studenttutor, error) {
	rows, err := q.db.QueryContext(ctx, listStudentTutorsByTutor, tutorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Studenttutor{}
	for rows.Next() {
		var i Studenttutor
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.TutorID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

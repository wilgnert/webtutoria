// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: students.sql

package database

import (
	"context"
	"database/sql"
)

const createStudent = `-- name: CreateStudent :execresult
insert into Students (name) value (?)
`

func (q *Queries) CreateStudent(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createStudent, name)
}

const getAllStudents = `-- name: GetAllStudents :many
select id, name from Students
`

func (q *Queries) GetAllStudents(ctx context.Context) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, getAllStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Student{}
	for rows.Next() {
		var i Student
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllStudentsWithNameLike = `-- name: GetAllStudentsWithNameLike :many
select id, name from Students
where name like ?
`

func (q *Queries) GetAllStudentsWithNameLike(ctx context.Context, name string) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, getAllStudentsWithNameLike, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Student{}
	for rows.Next() {
		var i Student
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentByID = `-- name: GetStudentByID :one
select id, name from Students
where id = ?
`

func (q *Queries) GetStudentByID(ctx context.Context, id int32) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentByID, id)
	var i Student
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateStudent = `-- name: UpdateStudent :execresult
update Students
set name = ?
where id = ?
`

type UpdateStudentParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateStudent, arg.Name, arg.ID)
}

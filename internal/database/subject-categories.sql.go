// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subject-categories.sql

package database

import (
	"context"
	"database/sql"
)

const createSubjectCategory = `-- name: CreateSubjectCategory :execresult
insert into SubjectCategory (subject_id, category_id) values (?, ?)
`

type CreateSubjectCategoryParams struct {
	SubjectID  int32 `json:"subject_id"`
	CategoryID int32 `json:"category_id"`
}

func (q *Queries) CreateSubjectCategory(ctx context.Context, arg CreateSubjectCategoryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSubjectCategory, arg.SubjectID, arg.CategoryID)
}

const deleteSubjectCategoriesBySubjectID = `-- name: DeleteSubjectCategoriesBySubjectID :exec
delete from SubjectCategory
where subject_id = ?
`

func (q *Queries) DeleteSubjectCategoriesBySubjectID(ctx context.Context, subjectID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSubjectCategoriesBySubjectID, subjectID)
	return err
}

const listCategoriesBySubjectID = `-- name: ListCategoriesBySubjectID :many
select c.name as name from SubjectCategory sc
join Categories c on sc.category_id = c.id
where sc.subject_id = ?
order by c.name
`

func (q *Queries) ListCategoriesBySubjectID(ctx context.Context, subjectID int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listCategoriesBySubjectID, subjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

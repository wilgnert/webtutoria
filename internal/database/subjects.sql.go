// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subjects.sql

package database

import (
	"context"
	"database/sql"
)

const createSubject = `-- name: CreateSubject :execresult
insert into Subjects (code, name, description, class) 
values (?, ?, ?, ?)
`

type CreateSubjectParams struct {
	Code        string         `json:"code"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Class       string         `json:"class"`
}

func (q *Queries) CreateSubject(ctx context.Context, arg CreateSubjectParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSubject,
		arg.Code,
		arg.Name,
		arg.Description,
		arg.Class,
	)
}

const getSubjectByID = `-- name: GetSubjectByID :one
select id, code, name, description, class from Subjects
where id = ?
`

func (q *Queries) GetSubjectByID(ctx context.Context, id int32) (Subject, error) {
	row := q.db.QueryRowContext(ctx, getSubjectByID, id)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.Class,
	)
	return i, err
}

const listSubjects = `-- name: ListSubjects :many
select id, code, name, description, class from Subjects
order by code
`

func (q *Queries) ListSubjects(ctx context.Context) ([]Subject, error) {
	rows, err := q.db.QueryContext(ctx, listSubjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subject{}
	for rows.Next() {
		var i Subject
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.Description,
			&i.Class,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubjectsByClass = `-- name: ListSubjectsByClass :many
select id, code, name, description, class from Subjects
where class = ?
order by code
`

func (q *Queries) ListSubjectsByClass(ctx context.Context, class string) ([]Subject, error) {
	rows, err := q.db.QueryContext(ctx, listSubjectsByClass, class)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subject{}
	for rows.Next() {
		var i Subject
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.Description,
			&i.Class,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubject = `-- name: UpdateSubject :execresult
update Subjects
set code = ?, name = ?, description = ?, class = ?
where id = ?
`

type UpdateSubjectParams struct {
	Code        string         `json:"code"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Class       string         `json:"class"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateSubject(ctx context.Context, arg UpdateSubjectParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateSubject,
		arg.Code,
		arg.Name,
		arg.Description,
		arg.Class,
		arg.ID,
	)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tutors.sql

package database

import (
	"context"
	"database/sql"
)

const createTutor = `-- name: CreateTutor :execresult
insert into Tutors (name, role_id, channel_id) value (?, ?, ?)
`

type CreateTutorParams struct {
	Name      string `json:"name"`
	RoleID    string `json:"role_id"`
	ChannelID string `json:"channel_id"`
}

func (q *Queries) CreateTutor(ctx context.Context, arg CreateTutorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTutor, arg.Name, arg.RoleID, arg.ChannelID)
}

const getAllTutors = `-- name: GetAllTutors :many
select id, name, channel_id, role_id from Tutors
`

func (q *Queries) GetAllTutors(ctx context.Context) ([]Tutor, error) {
	rows, err := q.db.QueryContext(ctx, getAllTutors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tutor{}
	for rows.Next() {
		var i Tutor
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ChannelID,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTutorsWithNameLike = `-- name: GetAllTutorsWithNameLike :many
select id, name, channel_id, role_id from Tutors
where name like ?
`

func (q *Queries) GetAllTutorsWithNameLike(ctx context.Context, name string) ([]Tutor, error) {
	rows, err := q.db.QueryContext(ctx, getAllTutorsWithNameLike, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tutor{}
	for rows.Next() {
		var i Tutor
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ChannelID,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTutorByID = `-- name: GetTutorByID :one
select id, name, channel_id, role_id from Tutors
where id = ?
`

func (q *Queries) GetTutorByID(ctx context.Context, id int32) (Tutor, error) {
	row := q.db.QueryRowContext(ctx, getTutorByID, id)
	var i Tutor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ChannelID,
		&i.RoleID,
	)
	return i, err
}

const updateTutor = `-- name: UpdateTutor :execresult
update Tutors
set name = ?,
    role_id = ?,
    channel_id = ?
where id = ?
`

type UpdateTutorParams struct {
	Name      string `json:"name"`
	RoleID    string `json:"role_id"`
	ChannelID string `json:"channel_id"`
	ID        int32  `json:"id"`
}

func (q *Queries) UpdateTutor(ctx context.Context, arg UpdateTutorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTutor,
		arg.Name,
		arg.RoleID,
		arg.ChannelID,
		arg.ID,
	)
}
